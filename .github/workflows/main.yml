name: Full CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  install-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install root dependencies
      run: npm ci

    - name: Install client dependencies
      run: |
        cd client
        npm ci

    - name: Run client tests
      run: |
        cd client
        npm test -- --watchAll=false

    - name: Install server dependencies
      run: |
        cd server
        npm ci

    - name: Create .env for server
      run: |
        cd server
        echo "PORT=5001" > .env
        echo "MONGO_URI=mongodb://localhost:27017/booking_system" >> .env
        echo "JWT_SECRET=supersecretkey123" >> .env
        echo "NODE_ENV=ci" >> .env

    - name: Start server in background
      run: |
        cd server
        npm start &
      env:
        PORT: 5001
        MONGO_URI: mongodb://localhost:27017/booking_system
        JWT_SECRET: supersecretkey123
        NODE_ENV: ci

    - name: Wait until server is ready
      run: |
        for i in {1..15}; do
          echo "⏳ Waiting for server (attempt $i)..."
          if curl -s http://localhost:5001/health | grep '"status":"ok"'; then
            echo "✅ Server is up!"
            break
          fi
          sleep 2
        done

    - name: Log in and extract token
      id: login
      run: |
        RESPONSE=$(curl -s -X POST http://localhost:5001/api/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email": "hod@test.com", "password": "password123"}')

        echo "Login response: $RESPONSE"
        TOKEN=$(echo $RESPONSE | jq -r '.token')
        echo "TOKEN=$TOKEN" >> $GITHUB_ENV

    - name: Inject token into Postman environment
      run: |
        jq '.values[] |= if .key == "auth_token" then .value = env.TOKEN else . end' postman/environment.json > postman/tmp.json
        mv postman/tmp.json postman/environment.json

    - name: Run API tests with Newman
      uses: anthonyvscode/newman-action@v1
      with:
        collection: ./postman/collection.json
        environment: ./postman/environment.json
